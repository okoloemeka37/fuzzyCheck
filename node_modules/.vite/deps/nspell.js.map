{
  "version": 3,
  "sources": ["../../is-buffer/index.js", "../../nspell/lib/util/rule-codes.js", "../../nspell/lib/util/affix.js", "../../nspell/lib/util/normalize.js", "../../nspell/lib/util/flag.js", "../../nspell/lib/util/exact.js", "../../nspell/lib/util/form.js", "../../nspell/lib/correct.js", "../../nspell/lib/util/casing.js", "../../nspell/lib/suggest.js", "../../nspell/lib/spell.js", "../../nspell/lib/util/apply.js", "../../nspell/lib/util/add.js", "../../nspell/lib/add.js", "../../nspell/lib/remove.js", "../../nspell/lib/word-characters.js", "../../nspell/lib/util/dictionary.js", "../../nspell/lib/dictionary.js", "../../nspell/lib/personal.js", "../../nspell/lib/index.js"],
  "sourcesContent": ["/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n", "'use strict'\n\nmodule.exports = ruleCodes\n\nvar NO_CODES = []\n\n// Parse rule codes.\nfunction ruleCodes(flags, value) {\n  var index = 0\n  var result\n\n  if (!value) return NO_CODES\n\n  if (flags.FLAG === 'long') {\n    // Creating an array of the right length immediately\n    // avoiding resizes and using memory more efficiently\n    result = new Array(Math.ceil(value.length / 2))\n\n    while (index < value.length) {\n      result[index / 2] = value.slice(index, index + 2)\n      index += 2\n    }\n\n    return result\n  }\n\n  return value.split(flags.FLAG === 'num' ? ',' : '')\n}\n", "'use strict'\n\nvar parse = require('./rule-codes.js')\n\nmodule.exports = affix\n\nvar push = [].push\n\n// Relative frequencies of letters in the English language.\nvar alphabet = 'etaoinshrdlcumwfgypbvkjxqz'.split('')\n\n// Expressions.\nvar whiteSpaceExpression = /\\s+/\n\n// Defaults.\nvar defaultKeyboardLayout = [\n  'qwertzuop',\n  'yxcvbnm',\n  'qaw',\n  'say',\n  'wse',\n  'dsx',\n  'sy',\n  'edr',\n  'fdc',\n  'dx',\n  'rft',\n  'gfv',\n  'fc',\n  'tgz',\n  'hgb',\n  'gv',\n  'zhu',\n  'jhn',\n  'hb',\n  'uji',\n  'kjm',\n  'jn',\n  'iko',\n  'lkm'\n]\n\n// Parse an affix file.\n// eslint-disable-next-line complexity\nfunction affix(doc) {\n  var rules = Object.create(null)\n  var compoundRuleCodes = Object.create(null)\n  var flags = Object.create(null)\n  var replacementTable = []\n  var conversion = {in: [], out: []}\n  var compoundRules = []\n  var aff = doc.toString('utf8')\n  var lines = []\n  var last = 0\n  var index = aff.indexOf('\\n')\n  var parts\n  var line\n  var ruleType\n  var count\n  var remove\n  var add\n  var source\n  var entry\n  var position\n  var rule\n  var value\n  var offset\n  var character\n\n  flags.KEY = []\n\n  // Process the affix buffer into a list of applicable lines.\n  while (index > -1) {\n    pushLine(aff.slice(last, index))\n    last = index + 1\n    index = aff.indexOf('\\n', last)\n  }\n\n  pushLine(aff.slice(last))\n\n  // Process each line.\n  index = -1\n\n  while (++index < lines.length) {\n    line = lines[index]\n    parts = line.split(whiteSpaceExpression)\n    ruleType = parts[0]\n\n    if (ruleType === 'REP') {\n      count = index + parseInt(parts[1], 10)\n\n      while (++index <= count) {\n        parts = lines[index].split(whiteSpaceExpression)\n        replacementTable.push([parts[1], parts[2]])\n      }\n\n      index--\n    } else if (ruleType === 'ICONV' || ruleType === 'OCONV') {\n      count = index + parseInt(parts[1], 10)\n      entry = conversion[ruleType === 'ICONV' ? 'in' : 'out']\n\n      while (++index <= count) {\n        parts = lines[index].split(whiteSpaceExpression)\n        entry.push([new RegExp(parts[1], 'g'), parts[2]])\n      }\n\n      index--\n    } else if (ruleType === 'COMPOUNDRULE') {\n      count = index + parseInt(parts[1], 10)\n\n      while (++index <= count) {\n        rule = lines[index].split(whiteSpaceExpression)[1]\n        position = -1\n\n        compoundRules.push(rule)\n\n        while (++position < rule.length) {\n          compoundRuleCodes[rule.charAt(position)] = []\n        }\n      }\n\n      index--\n    } else if (ruleType === 'PFX' || ruleType === 'SFX') {\n      count = index + parseInt(parts[3], 10)\n\n      rule = {\n        type: ruleType,\n        combineable: parts[2] === 'Y',\n        entries: []\n      }\n\n      rules[parts[1]] = rule\n\n      while (++index <= count) {\n        parts = lines[index].split(whiteSpaceExpression)\n        remove = parts[2]\n        add = parts[3].split('/')\n        source = parts[4]\n\n        entry = {\n          add: '',\n          remove: '',\n          match: '',\n          continuation: parse(flags, add[1])\n        }\n\n        if (add && add[0] !== '0') {\n          entry.add = add[0]\n        }\n\n        try {\n          if (remove !== '0') {\n            entry.remove = ruleType === 'SFX' ? end(remove) : remove\n          }\n\n          if (source && source !== '.') {\n            entry.match = ruleType === 'SFX' ? end(source) : start(source)\n          }\n        } catch (_) {\n          // Ignore invalid regex patterns.\n          entry = null\n        }\n\n        if (entry) {\n          rule.entries.push(entry)\n        }\n      }\n\n      index--\n    } else if (ruleType === 'TRY') {\n      source = parts[1]\n      offset = -1\n      value = []\n\n      while (++offset < source.length) {\n        character = source.charAt(offset)\n\n        if (character.toLowerCase() === character) {\n          value.push(character)\n        }\n      }\n\n      // Some dictionaries may forget a character.\n      // Notably `en` forgets `j`, `x`, and `y`.\n      offset = -1\n\n      while (++offset < alphabet.length) {\n        if (source.indexOf(alphabet[offset]) < 0) {\n          value.push(alphabet[offset])\n        }\n      }\n\n      flags[ruleType] = value\n    } else if (ruleType === 'KEY') {\n      push.apply(flags[ruleType], parts[1].split('|'))\n    } else if (ruleType === 'COMPOUNDMIN') {\n      flags[ruleType] = Number(parts[1])\n    } else if (ruleType === 'ONLYINCOMPOUND') {\n      // If we add this ONLYINCOMPOUND flag to `compoundRuleCodes`, then\n      // `parseDic` will do the work of saving the list of words that are\n      // compound-only.\n      flags[ruleType] = parts[1]\n      compoundRuleCodes[parts[1]] = []\n    } else if (\n      ruleType === 'FLAG' ||\n      ruleType === 'KEEPCASE' ||\n      ruleType === 'NOSUGGEST' ||\n      ruleType === 'WORDCHARS'\n    ) {\n      flags[ruleType] = parts[1]\n    } else {\n      // Default handling: set them for now.\n      flags[ruleType] = parts[1]\n    }\n  }\n\n  // Default for `COMPOUNDMIN` is `3`.\n  // See `man 4 hunspell`.\n  if (isNaN(flags.COMPOUNDMIN)) {\n    flags.COMPOUNDMIN = 3\n  }\n\n  if (!flags.KEY.length) {\n    flags.KEY = defaultKeyboardLayout\n  }\n\n  /* istanbul ignore if - Dictionaries seem to always have this. */\n  if (!flags.TRY) {\n    flags.TRY = alphabet.concat()\n  }\n\n  if (!flags.KEEPCASE) {\n    flags.KEEPCASE = false\n  }\n\n  return {\n    compoundRuleCodes: compoundRuleCodes,\n    replacementTable: replacementTable,\n    conversion: conversion,\n    compoundRules: compoundRules,\n    rules: rules,\n    flags: flags\n  }\n\n  function pushLine(line) {\n    line = line.trim()\n\n    // Hash can be a valid flag, so we only discard line that starts with it.\n    if (line && line.charCodeAt(0) !== 35 /* `#` */) {\n      lines.push(line)\n    }\n  }\n}\n\n// Wrap the `source` of an expression-like string so that it matches only at\n// the end of a value.\nfunction end(source) {\n  return new RegExp(source + '$')\n}\n\n// Wrap the `source` of an expression-like string so that it matches only at\n// the start of a value.\nfunction start(source) {\n  return new RegExp('^' + source)\n}\n", "'use strict'\n\nmodule.exports = normalize\n\n// Normalize `value` with patterns.\nfunction normalize(value, patterns) {\n  var index = -1\n\n  while (++index < patterns.length) {\n    value = value.replace(patterns[index][0], patterns[index][1])\n  }\n\n  return value\n}\n", "'use strict'\n\nmodule.exports = flag\n\n// Check whether a word has a flag.\nfunction flag(values, value, flags) {\n  return flags && value in values && flags.indexOf(values[value]) > -1\n}\n", "'use strict'\n\nvar flag = require('./flag.js')\n\nmodule.exports = exact\n\n// Check spelling of `value`, exactly.\nfunction exact(context, value) {\n  var index = -1\n\n  if (context.data[value]) {\n    return !flag(context.flags, 'ONLYINCOMPOUND', context.data[value])\n  }\n\n  // Check if this might be a compound word.\n  if (value.length >= context.flags.COMPOUNDMIN) {\n    while (++index < context.compoundRules.length) {\n      if (context.compoundRules[index].test(value)) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n", "'use strict'\n\nvar normalize = require('./normalize.js')\nvar exact = require('./exact.js')\nvar flag = require('./flag.js')\n\nmodule.exports = form\n\n// Find a known form of `value`.\nfunction form(context, value, all) {\n  var normal = value.trim()\n  var alternative\n\n  if (!normal) {\n    return null\n  }\n\n  normal = normalize(normal, context.conversion.in)\n\n  if (exact(context, normal)) {\n    if (!all && flag(context.flags, 'FORBIDDENWORD', context.data[normal])) {\n      return null\n    }\n\n    return normal\n  }\n\n  // Try sentence case if the value is uppercase.\n  if (normal.toUpperCase() === normal) {\n    alternative = normal.charAt(0) + normal.slice(1).toLowerCase()\n\n    if (ignore(context.flags, context.data[alternative], all)) {\n      return null\n    }\n\n    if (exact(context, alternative)) {\n      return alternative\n    }\n  }\n\n  // Try lowercase.\n  alternative = normal.toLowerCase()\n\n  if (alternative !== normal) {\n    if (ignore(context.flags, context.data[alternative], all)) {\n      return null\n    }\n\n    if (exact(context, alternative)) {\n      return alternative\n    }\n  }\n\n  return null\n}\n\nfunction ignore(flags, dict, all) {\n  return (\n    flag(flags, 'KEEPCASE', dict) || all || flag(flags, 'FORBIDDENWORD', dict)\n  )\n}\n", "'use strict'\n\nvar form = require('./util/form.js')\n\nmodule.exports = correct\n\n// Check spelling of `value`.\nfunction correct(value) {\n  return Boolean(form(this, value))\n}\n", "'use strict'\n\nmodule.exports = casing\n\n// Get the casing of `value`.\nfunction casing(value) {\n  var head = exact(value.charAt(0))\n  var rest = value.slice(1)\n\n  if (!rest) {\n    return head\n  }\n\n  rest = exact(rest)\n\n  if (head === rest) {\n    return head\n  }\n\n  if (head === 'u' && rest === 'l') {\n    return 's'\n  }\n\n  return null\n}\n\nfunction exact(value) {\n  return value === value.toLowerCase()\n    ? 'l'\n    : value === value.toUpperCase()\n    ? 'u'\n    : null\n}\n", "'use strict'\n\nvar casing = require('./util/casing.js')\nvar normalize = require('./util/normalize.js')\nvar flag = require('./util/flag.js')\nvar form = require('./util/form.js')\n\nmodule.exports = suggest\n\nvar push = [].push\n\n// Suggest spelling for `value`.\n// eslint-disable-next-line complexity\nfunction suggest(value) {\n  var self = this\n  var charAdded = {}\n  var suggestions = []\n  var weighted = {}\n  var memory\n  var replacement\n  var edits = []\n  var values\n  var index\n  var offset\n  var position\n  var count\n  var otherOffset\n  var otherCharacter\n  var character\n  var group\n  var before\n  var after\n  var upper\n  var insensitive\n  var firstLevel\n  var previous\n  var next\n  var nextCharacter\n  var max\n  var distance\n  var size\n  var normalized\n  var suggestion\n  var currentCase\n\n  value = normalize(value.trim(), self.conversion.in)\n\n  if (!value || self.correct(value)) {\n    return []\n  }\n\n  currentCase = casing(value)\n\n  // Check the replacement table.\n  index = -1\n\n  while (++index < self.replacementTable.length) {\n    replacement = self.replacementTable[index]\n    offset = value.indexOf(replacement[0])\n\n    while (offset > -1) {\n      edits.push(value.replace(replacement[0], replacement[1]))\n      offset = value.indexOf(replacement[0], offset + 1)\n    }\n  }\n\n  // Check the keyboard.\n  index = -1\n\n  while (++index < value.length) {\n    character = value.charAt(index)\n    before = value.slice(0, index)\n    after = value.slice(index + 1)\n    insensitive = character.toLowerCase()\n    upper = insensitive !== character\n    charAdded = {}\n\n    offset = -1\n\n    while (++offset < self.flags.KEY.length) {\n      group = self.flags.KEY[offset]\n      position = group.indexOf(insensitive)\n\n      if (position < 0) {\n        continue\n      }\n\n      otherOffset = -1\n\n      while (++otherOffset < group.length) {\n        if (otherOffset !== position) {\n          otherCharacter = group.charAt(otherOffset)\n\n          if (charAdded[otherCharacter]) {\n            continue\n          }\n\n          charAdded[otherCharacter] = true\n\n          if (upper) {\n            otherCharacter = otherCharacter.toUpperCase()\n          }\n\n          edits.push(before + otherCharacter + after)\n        }\n      }\n    }\n  }\n\n  // Check cases where one of a double character was forgotten, or one too many\n  // were added, up to three “distances”.  This increases the success-rate by 2%\n  // and speeds the process up by 13%.\n  index = -1\n  nextCharacter = value.charAt(0)\n  values = ['']\n  max = 1\n  distance = 0\n\n  while (++index < value.length) {\n    character = nextCharacter\n    nextCharacter = value.charAt(index + 1)\n    before = value.slice(0, index)\n\n    replacement = character === nextCharacter ? '' : character + character\n    offset = -1\n    count = values.length\n\n    while (++offset < count) {\n      if (offset <= max) {\n        values.push(values[offset] + replacement)\n      }\n\n      values[offset] += character\n    }\n\n    if (++distance < 3) {\n      max = values.length\n    }\n  }\n\n  push.apply(edits, values)\n\n  // Ensure the capitalised and uppercase values are included.\n  values = [value]\n  replacement = value.toLowerCase()\n\n  if (value === replacement || currentCase === null) {\n    values.push(value.charAt(0).toUpperCase() + replacement.slice(1))\n  }\n\n  replacement = value.toUpperCase()\n\n  if (value !== replacement) {\n    values.push(replacement)\n  }\n\n  // Construct a memory object for `generate`.\n  memory = {\n    state: {},\n    weighted: weighted,\n    suggestions: suggestions\n  }\n\n  firstLevel = generate(self, memory, values, edits)\n\n  // While there are no suggestions based on generated values with an\n  // edit-distance of `1`, check the generated values, `SIZE` at a time.\n  // Basically, we’re generating values with an edit-distance of `2`, but were\n  // doing it in small batches because it’s such an expensive operation.\n  previous = 0\n  max = Math.min(firstLevel.length, Math.pow(Math.max(15 - value.length, 3), 3))\n  size = Math.max(Math.pow(10 - value.length, 3), 1)\n\n  while (!suggestions.length && previous < max) {\n    next = previous + size\n    generate(self, memory, firstLevel.slice(previous, next))\n    previous = next\n  }\n\n  // Sort the suggestions based on their weight.\n  suggestions.sort(sort)\n\n  // Normalize the output.\n  values = []\n  normalized = []\n  index = -1\n\n  while (++index < suggestions.length) {\n    suggestion = normalize(suggestions[index], self.conversion.out)\n    replacement = suggestion.toLowerCase()\n\n    if (normalized.indexOf(replacement) < 0) {\n      values.push(suggestion)\n      normalized.push(replacement)\n    }\n  }\n\n  // BOOM! All done!\n  return values\n\n  function sort(a, b) {\n    return sortWeight(a, b) || sortCasing(a, b) || sortAlpha(a, b)\n  }\n\n  function sortWeight(a, b) {\n    return weighted[a] === weighted[b] ? 0 : weighted[a] > weighted[b] ? -1 : 1\n  }\n\n  function sortCasing(a, b) {\n    var leftCasing = casing(a)\n    var rightCasing = casing(b)\n\n    return leftCasing === rightCasing\n      ? 0\n      : leftCasing === currentCase\n      ? -1\n      : rightCasing === currentCase\n      ? 1\n      : undefined\n  }\n\n  function sortAlpha(a, b) {\n    return a.localeCompare(b)\n  }\n}\n\n// Get a list of values close in edit distance to `words`.\nfunction generate(context, memory, words, edits) {\n  var characters = context.flags.TRY\n  var data = context.data\n  var flags = context.flags\n  var result = []\n  var index = -1\n  var word\n  var before\n  var character\n  var nextCharacter\n  var nextAfter\n  var nextNextAfter\n  var nextUpper\n  var currentCase\n  var position\n  var after\n  var upper\n  var inject\n  var offset\n\n  // Check the pre-generated edits.\n  if (edits) {\n    while (++index < edits.length) {\n      check(edits[index], true)\n    }\n  }\n\n  // Iterate over given word.\n  index = -1\n\n  while (++index < words.length) {\n    word = words[index]\n    before = ''\n    character = ''\n    nextCharacter = word.charAt(0)\n    nextAfter = word\n    nextNextAfter = word.slice(1)\n    nextUpper = nextCharacter.toLowerCase() !== nextCharacter\n    currentCase = casing(word)\n    position = -1\n\n    // Iterate over every character (including the end).\n    while (++position <= word.length) {\n      before += character\n      after = nextAfter\n      nextAfter = nextNextAfter\n      nextNextAfter = nextAfter.slice(1)\n      character = nextCharacter\n      nextCharacter = word.charAt(position + 1)\n      upper = nextUpper\n\n      if (nextCharacter) {\n        nextUpper = nextCharacter.toLowerCase() !== nextCharacter\n      }\n\n      if (nextAfter && upper !== nextUpper) {\n        // Remove.\n        check(before + switchCase(nextAfter))\n\n        // Switch.\n        check(\n          before +\n            switchCase(nextCharacter) +\n            switchCase(character) +\n            nextNextAfter\n        )\n      }\n\n      // Remove.\n      check(before + nextAfter)\n\n      // Switch.\n      if (nextAfter) {\n        check(before + nextCharacter + character + nextNextAfter)\n      }\n\n      // Iterate over all possible letters.\n      offset = -1\n\n      while (++offset < characters.length) {\n        inject = characters[offset]\n\n        // Try uppercase if the original character was uppercased.\n        if (upper && inject !== inject.toUpperCase()) {\n          if (currentCase !== 's') {\n            check(before + inject + after)\n            check(before + inject + nextAfter)\n          }\n\n          inject = inject.toUpperCase()\n\n          check(before + inject + after)\n          check(before + inject + nextAfter)\n        } else {\n          // Add and replace.\n          check(before + inject + after)\n          check(before + inject + nextAfter)\n        }\n      }\n    }\n  }\n\n  // Return the list of generated words.\n  return result\n\n  // Check and handle a generated value.\n  function check(value, double) {\n    var state = memory.state[value]\n    var corrected\n\n    if (state !== Boolean(state)) {\n      result.push(value)\n\n      corrected = form(context, value)\n      state = corrected && !flag(flags, 'NOSUGGEST', data[corrected])\n\n      memory.state[value] = state\n\n      if (state) {\n        memory.weighted[value] = double ? 10 : 0\n        memory.suggestions.push(value)\n      }\n    }\n\n    if (state) {\n      memory.weighted[value]++\n    }\n  }\n\n  function switchCase(fragment) {\n    var first = fragment.charAt(0)\n\n    return (\n      (first.toLowerCase() === first\n        ? first.toUpperCase()\n        : first.toLowerCase()) + fragment.slice(1)\n    )\n  }\n}\n", "'use strict'\n\nvar form = require('./util/form.js')\nvar flag = require('./util/flag.js')\n\nmodule.exports = spell\n\n// Check spelling of `word`.\nfunction spell(word) {\n  var self = this\n  var value = form(self, word, true)\n\n  // Hunspell also provides `root` (root word of the input word), and `compound`\n  // (whether `word` was compound).\n  return {\n    correct: self.correct(word),\n    forbidden: Boolean(\n      value && flag(self.flags, 'FORBIDDENWORD', self.data[value])\n    ),\n    warn: Boolean(value && flag(self.flags, 'WARN', self.data[value]))\n  }\n}\n", "'use strict'\n\nmodule.exports = apply\n\n// Apply a rule.\nfunction apply(value, rule, rules, words) {\n  var index = -1\n  var entry\n  var next\n  var continuationRule\n  var continuation\n  var position\n\n  while (++index < rule.entries.length) {\n    entry = rule.entries[index]\n    continuation = entry.continuation\n    position = -1\n\n    if (!entry.match || entry.match.test(value)) {\n      next = entry.remove ? value.replace(entry.remove, '') : value\n      next = rule.type === 'SFX' ? next + entry.add : entry.add + next\n      words.push(next)\n\n      if (continuation && continuation.length) {\n        while (++position < continuation.length) {\n          continuationRule = rules[continuation[position]]\n\n          if (continuationRule) {\n            apply(next, continuationRule, rules, words)\n          }\n        }\n      }\n    }\n  }\n\n  return words\n}\n", "'use strict'\n\nvar apply = require('./apply.js')\n\nmodule.exports = add\n\nvar push = [].push\n\nvar NO_RULES = []\n\n// Add `rules` for `word` to the table.\nfunction addRules(dict, word, rules) {\n  var curr = dict[word]\n\n  // Some dictionaries will list the same word multiple times with different\n  // rule sets.\n  if (word in dict) {\n    if (curr === NO_RULES) {\n      dict[word] = rules.concat()\n    } else {\n      push.apply(curr, rules)\n    }\n  } else {\n    dict[word] = rules.concat()\n  }\n}\n\nfunction add(dict, word, codes, options) {\n  var position = -1\n  var rule\n  var offset\n  var subposition\n  var suboffset\n  var combined\n  var newWords\n  var otherNewWords\n\n  // Compound words.\n  if (\n    !('NEEDAFFIX' in options.flags) ||\n    codes.indexOf(options.flags.NEEDAFFIX) < 0\n  ) {\n    addRules(dict, word, codes)\n  }\n\n  while (++position < codes.length) {\n    rule = options.rules[codes[position]]\n\n    if (codes[position] in options.compoundRuleCodes) {\n      options.compoundRuleCodes[codes[position]].push(word)\n    }\n\n    if (rule) {\n      newWords = apply(word, rule, options.rules, [])\n      offset = -1\n\n      while (++offset < newWords.length) {\n        if (!(newWords[offset] in dict)) {\n          dict[newWords[offset]] = NO_RULES\n        }\n\n        if (rule.combineable) {\n          subposition = position\n\n          while (++subposition < codes.length) {\n            combined = options.rules[codes[subposition]]\n\n            if (\n              combined &&\n              combined.combineable &&\n              rule.type !== combined.type\n            ) {\n              otherNewWords = apply(\n                newWords[offset],\n                combined,\n                options.rules,\n                []\n              )\n              suboffset = -1\n\n              while (++suboffset < otherNewWords.length) {\n                if (!(otherNewWords[suboffset] in dict)) {\n                  dict[otherNewWords[suboffset]] = NO_RULES\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n", "'use strict'\n\nvar push = require('./util/add.js')\n\nmodule.exports = add\n\nvar NO_CODES = []\n\n// Add `value` to the checker.\nfunction add(value, model) {\n  var self = this\n\n  push(self.data, value, self.data[model] || NO_CODES, self)\n\n  return self\n}\n", "'use strict'\n\nmodule.exports = remove\n\n// Remove `value` from the checker.\nfunction remove(value) {\n  var self = this\n\n  delete self.data[value]\n\n  return self\n}\n", "'use strict'\n\nmodule.exports = wordCharacters\n\n// Get the word characters defined in affix.\nfunction wordCharacters() {\n  return this.flags.WORDCHARS || null\n}\n", "'use strict'\n\nvar parseCodes = require('./rule-codes.js')\nvar add = require('./add.js')\n\nmodule.exports = parse\n\n// Expressions.\nvar whiteSpaceExpression = /\\s/g\n\n// Parse a dictionary.\nfunction parse(buf, options, dict) {\n  // Parse as lines (ignoring the first line).\n  var value = buf.toString('utf8')\n  var last = value.indexOf('\\n') + 1\n  var index = value.indexOf('\\n', last)\n\n  while (index > -1) {\n    // Some dictionaries use tabs as comments.\n    if (value.charCodeAt(last) !== 9 /* `\\t` */) {\n      parseLine(value.slice(last, index), options, dict)\n    }\n\n    last = index + 1\n    index = value.indexOf('\\n', last)\n  }\n\n  parseLine(value.slice(last), options, dict)\n}\n\n// Parse a line in dictionary.\nfunction parseLine(line, options, dict) {\n  var slashOffset = line.indexOf('/')\n  var hashOffset = line.indexOf('#')\n  var codes = ''\n  var word\n  var result\n\n  // Find offsets.\n  while (\n    slashOffset > -1 &&\n    line.charCodeAt(slashOffset - 1) === 92 /* `\\` */\n  ) {\n    line = line.slice(0, slashOffset - 1) + line.slice(slashOffset)\n    slashOffset = line.indexOf('/', slashOffset)\n  }\n\n  // Handle hash and slash offsets.\n  // Note that hash can be a valid flag, so we should not just discard\n  // everything after it.\n  if (hashOffset > -1) {\n    if (slashOffset > -1 && slashOffset < hashOffset) {\n      word = line.slice(0, slashOffset)\n      whiteSpaceExpression.lastIndex = slashOffset + 1\n      result = whiteSpaceExpression.exec(line)\n      codes = line.slice(slashOffset + 1, result ? result.index : undefined)\n    } else {\n      word = line.slice(0, hashOffset)\n    }\n  } else if (slashOffset > -1) {\n    word = line.slice(0, slashOffset)\n    codes = line.slice(slashOffset + 1)\n  } else {\n    word = line\n  }\n\n  word = word.trim()\n\n  if (word) {\n    add(dict, word, parseCodes(options.flags, codes.trim()), options)\n  }\n}\n", "'use strict'\n\nvar parse = require('./util/dictionary.js')\n\nmodule.exports = add\n\n// Add a dictionary file.\nfunction add(buf) {\n  var self = this\n  var index = -1\n  var rule\n  var source\n  var character\n  var offset\n\n  parse(buf, self, self.data)\n\n  // Regenerate compound expressions.\n  while (++index < self.compoundRules.length) {\n    rule = self.compoundRules[index]\n    source = ''\n    offset = -1\n\n    while (++offset < rule.length) {\n      character = rule.charAt(offset)\n      source += self.compoundRuleCodes[character].length\n        ? '(?:' + self.compoundRuleCodes[character].join('|') + ')'\n        : character\n    }\n\n    self.compoundRules[index] = new RegExp(source, 'i')\n  }\n\n  return self\n}\n", "'use strict'\n\nmodule.exports = add\n\n// Add a dictionary.\nfunction add(buf) {\n  var self = this\n  var lines = buf.toString('utf8').split('\\n')\n  var index = -1\n  var line\n  var forbidden\n  var word\n  var flag\n\n  // Ensure there’s a key for `FORBIDDENWORD`: `false` cannot be set through an\n  // affix file so its safe to use as a magic constant.\n  if (self.flags.FORBIDDENWORD === undefined) self.flags.FORBIDDENWORD = false\n  flag = self.flags.FORBIDDENWORD\n\n  while (++index < lines.length) {\n    line = lines[index].trim()\n\n    if (!line) {\n      continue\n    }\n\n    line = line.split('/')\n    word = line[0]\n    forbidden = word.charAt(0) === '*'\n\n    if (forbidden) {\n      word = word.slice(1)\n    }\n\n    self.add(word, line[1])\n\n    if (forbidden) {\n      self.data[word].push(flag)\n    }\n  }\n\n  return self\n}\n", "'use strict'\n\nvar buffer = require('is-buffer')\nvar affix = require('./util/affix.js')\n\nmodule.exports = NSpell\n\nvar proto = NSpell.prototype\n\nproto.correct = require('./correct.js')\nproto.suggest = require('./suggest.js')\nproto.spell = require('./spell.js')\nproto.add = require('./add.js')\nproto.remove = require('./remove.js')\nproto.wordCharacters = require('./word-characters.js')\nproto.dictionary = require('./dictionary.js')\nproto.personal = require('./personal.js')\n\n// Construct a new spelling context.\nfunction NSpell(aff, dic) {\n  var index = -1\n  var dictionaries\n\n  if (!(this instanceof NSpell)) {\n    return new NSpell(aff, dic)\n  }\n\n  if (typeof aff === 'string' || buffer(aff)) {\n    if (typeof dic === 'string' || buffer(dic)) {\n      dictionaries = [{dic: dic}]\n    }\n  } else if (aff) {\n    if ('length' in aff) {\n      dictionaries = aff\n      aff = aff[0] && aff[0].aff\n    } else {\n      if (aff.dic) {\n        dictionaries = [aff]\n      }\n\n      aff = aff.aff\n    }\n  }\n\n  if (!aff) {\n    throw new Error('Missing `aff` in dictionary')\n  }\n\n  aff = affix(aff)\n\n  this.data = Object.create(null)\n  this.compoundRuleCodes = aff.compoundRuleCodes\n  this.replacementTable = aff.replacementTable\n  this.conversion = aff.conversion\n  this.compoundRules = aff.compoundRules\n  this.rules = aff.rules\n  this.flags = aff.flags\n\n  if (dictionaries) {\n    while (++index < dictionaries.length) {\n      if (dictionaries[index].dic) {\n        this.dictionary(dictionaries[index].dic)\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["line", "require_add", "require_dictionary"]
}
